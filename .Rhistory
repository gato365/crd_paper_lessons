shiny::runApp('regression_hdi')
setwd("G:/My Drive/03_research_and_development/01_research_topics/paper_0_CRD_main/lesson_plans/crd_paper_lessons/regression_hdi")
hdi_df = read_xlsx('hdi_2015.xlsx') %>%
select(-contains('HDI'))
library(readxl)
hdi_df = read_xlsx('hdi_2015.xlsx') %>%
select(-contains('HDI'))
hdi_df = read_xlsx('hdi_2015.xlsx') %>%
select(-contains('HDI'))
View(hdi_df)
hdi_df = read_xlsx('hdi_2015.xlsx') %>%
select(-contains('HDI'),-Country)
library(broom)
View(hdi_df)
colnames(hdi_df)
lm(`Fertility Rate`~`Trade (% GDP)`,data = hdi_df)
tidy(lm(`Fertility Rate`~`Trade (% GDP)`,data = hdi_df))
x <- 'Trade (% GDP)'
y <- 'Fertility Rate'
tidy(lm(y~x,data = hdi_df))
explanatory_variable <- 'Trade (% GDP)'
response_variable <- 'Fertility Rate'
f <- as.formula(
paste(response_variable,
paste(explanatory_variable, collapse = " + "),
sep = " ~ "))
f <- as.formula(
paste0(response_variable,
paste(explanatory_variable, collapse = " + "),
sep = " ~ "))
paste(response_variable,
paste(explanatory_variable, collapse = " + "),
sep = " ~ ")
setwd("G:/My Drive/03_research_and_development/01_research_topics/paper_0_CRD_main/lesson_plans/crd_paper_lessons/regression_hdi")
hdi_df = read_xlsx('hdi_2015.xlsx', sheet = 'raw_data') %>%
select(-contains('HDI'),-Country)
cn_df = read_xlsx('hdi_2015.xlsx', sheet = 'variables')
setwd("G:/My Drive/03_research_and_development/01_research_topics/paper_0_CRD_main/lesson_plans/crd_paper_lessons/regression_hdi")
hdi_df = read_xlsx('hdi_2015.xlsx', sheet = 'raw_data') %>%
select(-contains('HDI'),-Country)
cn_df = read_xlsx('hdi_2015.xlsx', sheet = 'variables')
hdi_df = read_xlsx('hdi_2015.xlsx', sheet = 'raw_data') #%>%
View(cn_df)
hdi_df = read_xlsx('hdi_2015.xlsx', sheet = 'raw_data') #%>%
#select(-contains('HDI'),-Country)
cn_df = read_xlsx('hdi_2015.xlsx', sheet = 'variables')
setwd("G:/My Drive/03_research_and_development/01_research_topics/paper_0_CRD_main/lesson_plans/crd_paper_lessons/regression_hdi")
## Bring in data
hdi_df = read_xlsx('hdi_2015.xlsx', sheet = 'raw_data')
cn_df = read_xlsx('hdi_2015.xlsx', sheet = 'variables')
## Change column names
colnames(hdi_df) = cn_df$abbreviations
## Clean up data
hdi_df = hdi_df %>%
select(-contains('HDI'),-Country)
View(hdi_df)
colnames(hdi_df)
explanatory_variable <- 'Trade_Percent_GDP'
response_variable <- 'Fertility_Rate'
f <- as.formula(
paste(response_variable,
paste(explanatory_variable, collapse = " + "),
sep = " ~ "))
tidy(lm(f,data = hdi_df))
## Bring in data
hdi_df = read_xlsx('hdi_2015.xlsx', sheet = 'raw_data')
cn_df = read_xlsx('hdi_2015.xlsx', sheet = 'variables')
imp_var_df = cn_df %>%
filter(ignore_variables != 1)
imp_var_df = cn_df %>%
filter(is.na(ignore_variables ))
View(imp_var_df)
real_var_names = imp_var_df$Variable
abbr_var_names = imp_var_df$abbreviations
list(real_var_names = abbr_var_names)
list(abbr_var_names)
m = list(abbr_var_names)
names(m) = abbr_var_names
real_var_names = imp_var_df$Variable
abbr_var_names = imp_var_df$abbreviations
m = list(abbr_var_names)
names(m) = abbr_var_names
real_var_names = imp_var_df$Variable
abbr_var_names = imp_var_df$abbreviations
real_var_names_list = as.list(real_var_names)
names(real_var_names_list) <- abbr_var_names
real_var_names_list
list(
'Fertility' = 'Fer','Trade' = 'Trade'
)
real_var_names = imp_var_df$Variable
abbr_var_names = imp_var_df$abbreviations
real_var_names_list = as.list(abbr_var_names)
names(real_var_names_list) <- real_var_names
real_var_names_list
list(
'Fertility' = 'Fer','Trade' = 'Trade'
)
runApp()
runApp()
runApp()
runApp('G:/My Drive/03_research_and_development/04_emans_projects/01_statistical_inferences_projects/project_02_linear_regression_assumptions/slr_assumptions')
runApp()
runApp()
runApp()
runApp()
library(DT)
runApp()
runApp()
runApp()
install.packages('reactable')
library(shiny)
library(reactable)
ui <- fluidPage(
reactableOutput("table")
)
server <- function(input, output) {
output$table <- renderReactable({
reactable(iris)
})
}
shinyApp(ui, server)
library(shiny)
library(reactable)
ui <- fluidPage(
reactableOutput("table")
selectInput('var','Select Variables',colnames(iris))
)
server <- function(input, output) {
output$table <- renderReactable({
reactable(iris)
})
}
shinyApp(ui, server)
library(shiny)
library(reactable)
ui <- fluidPage(
sidebarPanel(
selectInput('var','Select Variables',colnames(iris))
),
reactableOutput("table")
)
server <- function(input, output) {
output$table <- renderReactable({
reactable(iris)
})
}
shinyApp(ui, server)
library(shiny)
library(reactable)
ui <- fluidPage(
sidebarPanel(
checkboxInput('var','Select Variables',colnames(iris))
),
reactableOutput("table")
)
server <- function(input, output) {
output$table <- renderReactable({
reactable(iris)
})
}
shinyApp(ui, server)
library(shiny)
library(reactable)
ui <- fluidPage(
sidebarPanel(
checkboxInput('var','Select Variables',colnames(iris))
),
reactableOutput("table")
)
server <- function(input, output) {
output$table <- renderReactable({
reactable(iris)
})
}
shinyApp(ui, server)
server <- function(input, output) {
output$table <- renderReactable({
reactable(iris)
})
}
library(shiny)
library(reactable)
ui <- fluidPage(
sidebarPanel(
checkboxInput('var','Select Variables',colnames(iris))
),
reactableOutput("table")
)
server <- function(input, output) {
output$table <- renderReactable({
reactable(iris)
})
}
shinyApp(ui, server)
library(shiny)
library(reactable)
ui <- fluidPage(
sidebarPanel(
checkboxGroupInput(inputId = 'var',
label = 'Select Variables',
choices = colnames(iris))
),
reactableOutput("table")
)
server <- function(input, output) {
output$table <- renderReactable({
reactable(iris)
})
}
shinyApp(ui, server)
library(shiny)
library(reactable)
ui <- fluidPage(
sidebarPanel(
checkboxGroupInput(inputId = 'var',
label = 'Select Variables',
choices = colnames(iris))
),
reactableOutput("table")
)
server <- function(input, output) {
output$table <- renderReactable({
iris %>%
select(input$var) %>%
reactable()
})
}
shinyApp(ui, server)
library(shiny)
library(reactable)
library(tidyverse)
ui <- fluidPage(
sidebarPanel(
checkboxGroupInput(inputId = 'var',
label = 'Select Variables',
choices = colnames(iris),selected = 'Species')
),
reactableOutput("table")
)
server <- function(input, output) {
output$table <- renderReactable({
iris %>%
select(input$var) %>%
reactable()
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
setwd("G:/My Drive/03_research_and_development/01_research_topics/paper_0_CRD_main/lesson_plans/crd_paper_lessons/regression_hdi")
## Bring in data
hdi_df = read_xlsx('hdi_2015.xlsx', sheet = 'raw_data')
cn_df = read_xlsx('hdi_2015.xlsx', sheet = 'variables')
## Change column names
colnames(hdi_df) = cn_df$abbreviations
## Clean up data
hdi_df = hdi_df %>%
dplyr::select(-contains('HDI'))
imp_var_df = cn_df %>%
filter(is.na(ignore_variables ))
## Get Variable Names
real_var_names = imp_var_df$Variable
abbr_var_names = imp_var_df$abbreviations
real_var_names_list = as.list(abbr_var_names)
names(real_var_names_list) <- real_var_names
real_var_names
runApp()
abbr_var_names
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
